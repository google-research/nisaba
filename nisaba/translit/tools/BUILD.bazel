# Copyright 2025 Nisaba Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Error rate calculation utilities for specific transliteration use cases.

load("//third_party/bazel_rules/rules_cc/cc:cc_binary.bzl", "cc_binary")
load("//third_party/bazel_rules/rules_cc/cc:cc_library.bzl", "cc_library")
load("//third_party/bazel_rules/rules_cc/cc:cc_test.bzl", "cc_test")

load("@pip_deps//:requirements.bzl", "requirement")

package(default_applicable_licenses = [
])

cc_binary(
    name = "calculate_error_rate",
    srcs = ["calculate_error_rate_main.cc"],
    deps = [
        ":calculate_error_rate_lib",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log:check",
    ],
)

cc_library(
    name = "calculate_error_rate_lib",
    srcs = ["calculate_error_rate.cc"],
    hdrs = ["calculate_error_rate.h"],
    deps = [
        "//nisaba/port:file_util",
        "//nisaba/port:utf8_util",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@org_openfst//:lib_lite",
        "@org_openfst//:symbol-table",
    ],
)

cc_test(
    name = "calculate_error_rate_test",
    size = "medium",
    srcs = ["calculate_error_rate_test.cc"],
    deps = [
        ":calculate_error_rate_lib",
        "//nisaba/port:status-matchers",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "emd_tsv_to_json_test",
    size = "medium",
    srcs = ["emd_tsv_to_json_test.cc"],
    deps = [
        ":calculate_error_rate_lib",
        "//nisaba/port:file_util",
        "//nisaba/port:status-matchers",
        "//nisaba/port:utf8_util",
        "@com_github_nlohmann_json//:json",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

py_binary(
    name = "calculate_emd_cer",
    srcs = ["calculate_emd_cer.py"],
    deps = [
        ":emd_cer",
        "@io_abseil_py//absl:app",
        "@io_abseil_py//absl/flags",
        requirement("numpy"),
        requirement("pyemd"),
    ],
)

py_library(
    name = "emd_cer",
    srcs = ["emd_cer.py"],
    deps = [
        requirement("numpy"),
        requirement("pyemd"),
    ],
)

py_test(
    name = "emd_cer_test",
    srcs = ["emd_cer_test.py"],
    deps = [
        ":emd_cer",
        "@io_abseil_py//absl/testing:absltest",
    ],
)

cc_binary(
    name = "extract-kbest-full-string",
    srcs = [
        "extract-kbest-full-string_main.cc",
    ],
    deps = [
        ":kbest-full-string-util-lib",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log:check",
    ],
)

cc_binary(
    name = "rejoin-kbest-full-string",
    srcs = [
        "rejoin-kbest-full-string_main.cc",
    ],
    deps = [
        ":kbest-full-string-util-lib",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log:check",
    ],
)

cc_binary(
    name = "ensemble-full-string",
    srcs = [
        "ensemble-full-string_main.cc",
    ],
    deps = [
        ":kbest-full-string-util-lib",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log:check",
    ],
)

cc_library(
    name = "kbest-full-string-util-lib",
    srcs = [
        "kbest-full-string-util.cc",
    ],
    hdrs = [
        "kbest-full-string-util.h",
    ],
    deps = [
        "//nisaba/port:file_util",
        "//nisaba/port:utf8_util",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@org_openfst//:lib_lite",
        "@org_openfst//:symbol-table",
        "@org_openfst//:weight",
        "@org_opengrm_ngram//:opengrm-ngram-lib",
    ],
)

cc_test(
    name = "kbest-full-string-util_test",
    srcs = ["kbest-full-string-util_test.cc"],
    deps = [
        ":kbest-full-string-util-lib",
        "//nisaba/port:status-matchers",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)
