# Copyright 2024 Nisaba Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Transliteration utilities using finite-state pair language models.

load("@rules_proto//proto:defs.bzl", "proto_library")

package(
    default_applicable_licenses = [
    ],
    default_visibility = [
        "//nlp/sweet/translit:__subpackages__",
    ],
)

licenses(["notice"])

cc_binary(
    name = "pairlm_decoder",
    srcs = ["pairlm_decoder_main.cc"],
    deps = [
        ":pairlm_decoder_options_cc_proto",
        ":pairlm_decoder_runner",
        "//nisaba/port:file_util",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/status",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "pairlm_decoder_runner",
    srcs = ["pairlm_decoder_runner.cc"],
    hdrs = ["pairlm_decoder_runner.h"],
    deps = [
        ":pairlm_decoder-lib",
        ":pairlm_decoder_options_cc_proto",
        "//nisaba/port:file_util",
        "//nisaba/port:status_macros",
        "//nisaba/port:thread_pool",
        "//nisaba/port:timer",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@org_openfst//:fst",
    ],
)

cc_test(
    name = "pairlm_decoder_runner_test",
    srcs = ["pairlm_decoder_runner_test.cc"],
    data = [
        "testdata/hi.translit.sampled.train.visnorm.align1.WB15.mod.fst",
        "testdata/hi.translit.sampled.train.visnorm.align1.WB15.mod.trans.fst",
        "testdata/udhr_hi.txt",
    ],
    deps = [
        ":pairlm_decoder_options_cc_proto",
        ":pairlm_decoder_runner",
        "//nisaba/port:file_util",
        "//nisaba/port:status-matchers",
        "//nisaba/port:test_utils",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "pairlm_decoder-lib",
    srcs = ["pairlm_decoder.cc"],
    hdrs = ["pairlm_decoder.h"],
    deps = [
        ":pairlm_decoder_options_cc_proto",
        ":wordpiece-segmenter-lib",
        "//nisaba/port:file_util",
        "//nisaba/port:integral_types",
        "//nisaba/port:thread_pool",
        "//nisaba/port:utf8_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@org_openfst//:fst",
        "@org_openfst//:symbol-table",
        "@org_openfst//:weight",
        "@org_opengrm_ngram//:opengrm-ngram-lib",
    ],
)

cc_test(
    name = "pairlm_decoder_test",
    size = "small",
    srcs = ["pairlm_decoder_test.cc"],
    deps = [
        ":pairlm_decoder-lib",
        ":pairlm_decoder_options_cc_proto",
        "//nisaba/port:file_util",
        "//nisaba/port:status-matchers",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@org_openfst//:fst",
        "@org_openfst//:symbol-table",
    ],
)

cc_library(
    name = "wordpiece-segmenter-lib",
    srcs = [
        "wordpiece-segmenter.cc",
    ],
    hdrs = [
        "wordpiece-segmenter.h",
    ],
    deps = [
        "//nisaba/port:utf8_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@org_openfst//:lib_lite",
        "@org_openfst//:symbol-table",
    ],
)

cc_test(
    name = "wordpiece-segmenter_test",
    srcs = ["wordpiece-segmenter_test.cc"],
    data = [
        "testdata/wp_earnest.50.model.txt",
    ],
    deps = [
        ":wordpiece-segmenter-lib",
        "//nisaba/port:file_util",
        "//nisaba/port:status-matchers",
        "//nisaba/port:test_utils",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_proto_library(
    name = "pairlm_decoder_options_cc_proto",
    deps = [":pairlm_decoder_options-proto"],
)

proto_library(
    name = "pairlm_decoder_options-proto",
    srcs = ["pairlm_decoder_options.proto"],
)
