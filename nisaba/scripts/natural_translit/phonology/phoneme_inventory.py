# Copyright 2023 Nisaba Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Lint as: python3
"""Multilingual phoneme inventory.

This library builds a high coverage Phon inventory. Language specific phoneme
inventories can be built by importing the relevant subset of Phons.
For example: /nisaba/scripts/natural_translit/brahmic/psa_phoneme_inventory.py

The multilingual inventory is used for shared multilingual or
language agnostic modules. For example:
/nisaba/scripts/natural_translit/phonology/operations/voicing.py

TODO: Add test to make sure phon_table is up to date.
"""

from nisaba.scripts.natural_translit.latin import ltn_inventory as ltn
from nisaba.scripts.natural_translit.phonology import feature
from nisaba.scripts.natural_translit.phonology import modify_phon as mod
from nisaba.scripts.natural_translit.phonology import phon as p
from nisaba.scripts.natural_translit.utils import list_op as ls

f = feature.FEATURE_INVENTORY
tr = ltn.TRANSLIT_INVENTORY

# Base Phon: Used as building blocks to derive and compose related Phons.
# Simple Phon: Non-composite, i.e. base and derived Phons.

SILENCE = [p.base_phon('sil', [f.silent], '', tr.DEL)]

STANDALONE_FEATURE = ls.apply_foreach(p.base_phon, [
    ['S', [f.syllabic], 'Ãç', tr.U, 'SYL'],
    ['Z', [f.nonsyllabic], 'ÃØ', tr.DEL, 'NSY'],
    ['N', [f.nasal], '~', tr.N, 'NSL'],
    ['L', [f.lateral], 'À°', tr.L, 'LAT'],
    ['H', [f.aspirated], ' ∞', tr.H, 'ASP'],
    ['W', [f.labial], ' ∑', tr.W, 'LBL'],
    ['Y', [f.palatal], ' ≤', tr.Y, 'PLT'],
    ['G', [f.velar], 'À†', tr.G, 'VLR'],
    ['C', [f.pharyngeal], 'À§', tr.H, 'PHR'],
    ['X', [f.glottal], 'ÀÄ', tr.H, 'GLT'],
    ['R', [f.rhotic], 'Àû', tr.R, 'RHT'],
    ['.', [f.interrupt], '.', tr.DEL, 'SYB']  # syllable break
])

UNASSIGNED_VOWEL = ls.apply_foreach(p.base_phon, [
    ['_', [f.vowel], '', tr.DEL, 'V_TNT'],  # tentative
    ['V', [f.vowel], '', tr.DEL, 'V_PRN'],  # pronounced
])

BASE_VOWEL = ls.apply_foreach(p.base_phon, [
    ['i', f.close_vwl + f.front_unr, 'i', tr.I],
    ['ui', f.close_vwl + f.front_rnd, 'y', tr.U],
    ['im', f.close_vwl + f.n_front_unr, '√Ø', tr.I],
    ['um', f.close_vwl + f.n_front_rnd, '√ø', tr.U],
    ['ic', f.close_vwl + f.center_unr, '…®', tr.I],
    ['uc', f.close_vwl + f.center_rnd, ' â', tr.U],
    ['in', f.close_vwl + f.n_back_unr, '…ØÃà', tr.U],
    ['un', f.close_vwl + f.n_back_rnd, '√º', tr.U],
    ['iu', f.close_vwl + f.back_unr, '…Ø', tr.U],
    ['u', f.close_vwl + f.back_rnd, 'u', tr.U],
    ['ie', f.n_close_vwl + f.front_unr, 'iÃû', tr.I],
    ['ue', f.n_close_vwl + f.front_rnd, 'yÃû', tr.U],
    ['iy', f.n_close_vwl + f.n_front_unr, '…™', tr.I],
    ['uy', f.n_close_vwl + f.n_front_rnd, ' è', tr.U],
    ['ix', f.n_close_vwl + f.center_unr, '…™Ãà', tr.U],
    ['ux', f.n_close_vwl + f.center_rnd, ' äÃà', tr.U],
    ['iv', f.n_close_vwl + f.n_back_unr, '…ØÃΩ', tr.U],
    ['uv', f.n_close_vwl + f.n_back_rnd, ' ä', tr.U],
    ['io', f.n_close_vwl + f.back_unr, '…ØÃû', tr.U],
    ['uo', f.n_close_vwl + f.back_rnd, 'uÃû', tr.U],
    ['e', f.c_mid_vwl + f.front_unr, 'e', tr.E],
    ['oi', f.c_mid_vwl + f.front_rnd, '√∏', tr.O],
    ['ey', f.c_mid_vwl + f.n_front_unr, 'eÃà', tr.E],
    ['oy', f.c_mid_vwl + f.n_front_rnd, '√∏Ãà', tr.O],
    ['el', f.c_mid_vwl + f.center_unr, '…ò', tr.U],
    ['ol', f.c_mid_vwl + f.center_rnd, '…µ', tr.O],
    ['en', f.c_mid_vwl + f.n_back_unr, '…§Ãà', tr.U],
    ['on', f.c_mid_vwl + f.n_back_rnd, 'oÃà', tr.O],
    ['eo', f.c_mid_vwl + f.back_unr, '…§', tr.U],
    ['o', f.c_mid_vwl + f.back_rnd, 'o', tr.O],
    ['ee', f.mid_vwl + f.front_unr, 'eÃû', tr.E],
    ['oee', f.mid_vwl + f.front_rnd, '√∏Ãû', tr.O],
    ['eem', f.mid_vwl + f.n_front_unr, 'eÃΩ', tr.E],
    ['oem', f.mid_vwl + f.n_front_rnd, '√∏ÃΩ', tr.O],
    ['ec', f.mid_vwl + f.center_unr, '…ô', tr.U],
    ['oc', f.mid_vwl + f.center_rnd, '…µÃû', tr.O],
    ['aan', f.mid_vwl + f.n_back_unr, '…§ÃΩ', tr.U],
    ['oon', f.mid_vwl + f.n_back_rnd, 'oÃΩ', tr.O],
    ['aa', f.mid_vwl + f.back_unr, '…§Ãû', tr.U],
    ['oo', f.mid_vwl + f.back_rnd, 'oÃû', tr.O],
    ['eh', f.o_mid_vwl + f.front_unr, '…õ', tr.E],
    ['oe', f.o_mid_vwl + f.front_rnd, '≈ì', tr.O],
    ['em', f.o_mid_vwl + f.n_front_unr, '…õÃà', tr.E],
    ['om', f.o_mid_vwl + f.n_front_rnd, '≈ìÃà', tr.O],
    ['ex', f.o_mid_vwl + f.center_unr, '…ú', tr.E],
    ['ox', f.o_mid_vwl + f.center_rnd, '…û', tr.O],
    ['ahn', f.o_mid_vwl + f.n_back_unr, ' åÃà', tr.A],
    ['ohn', f.o_mid_vwl + f.n_back_rnd, '…îÃà', tr.O],
    ['ah', f.o_mid_vwl + f.back_unr, ' å', tr.A],
    ['oh', f.o_mid_vwl + f.back_rnd, '…î', tr.O],
    ['ae', f.n_open_vwl + f.front_unr, '√¶', tr.A],
    ['oae', f.n_open_vwl + f.front_rnd, '≈ìÃû', tr.O],
    ['al', f.n_open_vwl + f.n_front_unr, 'aÃΩ', tr.A],
    ['oal', f.n_open_vwl + f.n_front_rnd, '…∂ÃΩ', tr.O],
    ['av', f.n_open_vwl + f.center_unr, '…ê', tr.A],
    ['ov', f.n_open_vwl + f.center_rnd, '…ûÃû', tr.O],
    ['arn', f.n_open_vwl + f.n_back_unr, '…ëÃΩ', tr.A],
    ['orn', f.n_open_vwl + f.n_back_rnd, '…íÃΩ', tr.O],
    ['ar', f.n_open_vwl + f.back_unr, ' åÃû', tr.A],
    ['or', f.n_open_vwl + f.back_rnd, '…îÃû', tr.O],
    ['a', f.open_vwl + f.front_unr, 'a', tr.A],
    ['oa', f.open_vwl + f.front_rnd, '…∂', tr.O],
    ['am', f.open_vwl + f.n_front_unr, '√¶Ãû', tr.A],
    ['oam', f.open_vwl + f.n_front_rnd, '…∂Ãà', tr.O],
    ['au', f.open_vwl + f.center_unr, '√§', tr.A],
    ['ou', f.open_vwl + f.center_rnd, '…íÃà', tr.O],
    ['awn', f.open_vwl + f.n_back_unr, '…ëÃà', tr.O],
    ['own', f.open_vwl + f.n_back_rnd, '…íÃà', tr.O],
    ['aw', f.open_vwl + f.back_unr, '…ë', tr.O],
    ['ow', f.open_vwl + f.back_rnd, '…í', tr.O],
])

SIMPLE_VOWEL = UNASSIGNED_VOWEL + BASE_VOWEL


VOICED_NASAL = ls.apply_foreach(p.base_phon, [
    ['m', f.vcd_nasal + [f.bilabial], 'm', tr.M],
    ['mi', f.vcd_nasal + [f.labiodental], '…±', tr.M],
    ['ni', f.vcd_nasal + [f.dental], 'nÃ™', tr.N],
    ['n', f.vcd_nasal + [f.alveolar], 'n', tr.N],
    ['nx', f.vcd_nasal + [f.postalveolar], 'nÃ†', tr.N],
    ['nn', f.vcd_nasal + [f.retroflex], '…≥', tr.N],
    ['ny', f.vcd_nasal + [f.palatal], '…≤', tr.S_NY],
    ['ng', f.vcd_nasal + [f.velar], '≈ã', tr.S_NG],
    ['nj', f.vcd_nasal + [f.uvular], '…¥', tr.S_NG],
])

DEVOICED_NASAL = [mod.devoiced(phon) for phon in VOICED_NASAL]
SHORT_NASAL = VOICED_NASAL + DEVOICED_NASAL
NASAL = SHORT_NASAL

VOICELESS_STOP = ls.apply_foreach(p.base_phon, [
    ['p', f.vcl_stop + [f.bilabial], 'p', tr.P],
    ['pi', f.vcl_stop + [f.labiodental], 'pÃ™', tr.P],
    ['ti', f.vcl_stop + [f.dental], 'tÃ™', tr.T],
    ['t', f.vcl_stop + [f.alveolar], 't', tr.T],
    ['tx', f.vcl_stop + [f.postalveolar], 'tÃ†', tr.T],
    ['tt', f.vcl_stop + [f.retroflex], ' à', tr.T],
    ['ky', f.vcl_stop + [f.palatal], 'c', tr.K + tr.Y],
    ['k', f.vcl_stop + [f.velar], 'k', tr.K],
    ['q', f.vcl_stop + [f.uvular], 'q', tr.K],
    ['c', f.vcl_stop + [f.epiglottal], ' °', tr.K],
    ['x', f.vcl_stop + [f.glottal], ' î', tr.T],
])

VOICED_STOP = ls.apply_foreach(p.base_phon, [
    ['b', f.vcd_stop + [f.bilabial], 'b', tr.B],
    ['bi', f.vcd_stop + [f.labiodental], 'bÃ™', tr.B],
    ['di', f.vcd_stop + [f.dental], 'dÃ™', tr.D],
    ['d', f.vcd_stop + [f.alveolar], 'd', tr.D],
    ['dx', f.vcd_stop + [f.postalveolar], 'dÃ†', tr.D],
    ['dd', f.vcd_stop + [f.retroflex], '…ñ', tr.D],
    ['gy', f.vcd_stop + [f.palatal], '…ü', tr.G + tr.Y],
    ['g', f.vcd_stop + [f.velar], '…°', tr.G],
    ['j', f.vcd_stop + [f.uvular], '…¢', tr.G],
])

EJECTIVE_STOP = [mod.nonpulmonic(phon) for phon in VOICELESS_STOP]
VOICED_IMPLOSIVE = [mod.nonpulmonic(phon) for phon in VOICED_STOP]
DEVOICED_IMPLOSIVE = [mod.devoiced(phon) for phon in VOICED_IMPLOSIVE]
IMPLOSIVE = VOICED_IMPLOSIVE + DEVOICED_IMPLOSIVE
STOP = VOICELESS_STOP + VOICED_STOP + EJECTIVE_STOP + IMPLOSIVE

VOICELESS_FRICATIVE = ls.apply_foreach(p.base_phon, [
    ['si', f.vcl_sib_fricative + [f.dental], 'sÃ™', tr.S],
    ['s', f.vcl_sib_fricative + [f.alveolar], 's', tr.S],
    ['sh', f.vcl_sib_fricative + [f.postalveolar], ' É', tr.S_SH],
    ['ss', f.vcl_sib_fricative + [f.retroflex], ' Ç', tr.S_SH],
    ['sy', f.vcl_sib_fricative + [f.palatal], '…ï', tr.S_SH + tr.Y],
    ['ph', f.vcl_nonsib_fricative + [f.bilabial], '…∏', tr.F],
    ['f', f.vcl_nonsib_fricative + [f.labiodental], 'f', tr.F],
    ['th', f.vcl_nonsib_fricative + [f.dental], 'Œ∏', tr.S_TH],
    ['sf', f.vcl_nonsib_fricative + [f.alveolar], 'Œ∏Ã†', tr.S_SH],
    ['sx', f.vcl_nonsib_fricative + [f.postalveolar], '…πÃ†ÃäÀî', tr.S_SH],
    ['sr', f.vcl_nonsib_fricative + [f.retroflex], '…ªÀîÃä', tr.S_SH],
    ['hy', f.vcl_nonsib_fricative + [f.palatal], '√ß', tr.S_SH + tr.Y],
    ['kh', f.vcl_nonsib_fricative + [f.velar], 'x', tr.H],
    ['qh', f.vcl_nonsib_fricative + [f.uvular], 'œá', tr.H],
    ['ch', f.vcl_nonsib_fricative + [f.pharyngeal], 'ƒß', tr.H],
    ['h', f.vcl_nonsib_fricative + [f.glottal], 'h', tr.H],
    ['svl', f.vcl_lat_fricative + [f.dental], '…¨Ã™', tr.S_SH],
    ['sl', f.vcl_lat_fricative + [f.alveolar], '…¨', tr.S_SH],
    ['shl', f.vcl_lat_fricative + [f.postalveolar], '…¨', tr.S_SH],
    ['ssl', f.vcl_lat_fricative + [f.retroflex], 'Íûé', tr.S_SH],
    ['sly', f.vcl_lat_fricative + [f.palatal], 'ùºÜ', tr.S_SH],
    ['khl', f.vcl_lat_fricative + [f.velar], 'ùºÑ', tr.H],
    ['qhl', f.vcl_lat_fricative + [f.uvular], 'ùºÑÃ†', tr.H],
    ['fy', f.vcl_nonsib_fricative + [f.palatal, f.labial], '…•Ãä', tr.F + tr.Y],
    ['hw', f.vcl_nonsib_fricative + f.vlr_lbl, ' ç', tr.W],
    ['sj', f.vcl_nonsib_fricative + f.vlr_lbl + [f.palatal], '…ß', tr.W],
])

VOICED_FRICATIVE = ls.apply_foreach(p.base_phon, [
    ['zi', f.vcd_sib_fricative + [f.dental], 'zÃ™', tr.Z],
    ['z', f.vcd_sib_fricative + [f.alveolar], 'z', tr.Z],
    ['zh', f.vcd_sib_fricative + [f.postalveolar], ' í', tr.S_ZH],
    ['zz', f.vcd_sib_fricative + [f.retroflex], ' ê', tr.S_ZH],
    ['zy', f.vcd_sib_fricative + [f.palatal], ' ë', tr.S_ZH + tr.Y],
    ['bh', f.vcd_nonsib_fricative + [f.bilabial], 'Œ≤', tr.V],
    ['v', f.vcd_nonsib_fricative + [f.labiodental], 'v', tr.V],
    ['dh', f.vcd_nonsib_fricative + [f.dental], '√∞', tr.S_DH],
    ['zv', f.vcd_nonsib_fricative + [f.alveolar], '√∞Ã†', tr.S_ZH],
    ['zx', f.vcd_nonsib_fricative + [f.postalveolar], '…πÃ†Àî', tr.S_ZH],
    ['zr', f.vcd_nonsib_fricative + [f.retroflex], '…ªÀî', tr.S_ZH],
    ['yy', f.vcd_nonsib_fricative + [f.palatal], ' ù', tr.S_ZH + tr.Y],
    ['gh', f.vcd_nonsib_fricative + [f.velar], '…£', tr.W],
    ['jh', f.vcd_nonsib_fricative + [f.uvular], ' Å', tr.W],
    ['cha', f.vcd_nonsib_fricative + [f.pharyngeal], ' ï', tr.W],
    ['ha', f.vcd_nonsib_fricative + [f.glottal], '…¶', tr.H],
    ['zvl', f.vcd_lat_fricative + [f.dental], '…ÆÃ™', tr.S_ZH],
    ['zl', f.vcd_lat_fricative + [f.alveolar], '…Æ', tr.S_ZH],
    ['zhl', f.vcd_lat_fricative + [f.postalveolar], '…Æ', tr.S_ZH],
    ['zzl', f.vcd_lat_fricative + [f.retroflex], '…≠Àî', tr.S_ZH],
    ['zly', f.vcd_lat_fricative + [f.palatal], ' éÃù', tr.S_ZH],
    ['ghl', f.vcd_lat_fricative + [f.velar], ' üÃù', tr.W],
    ['jhl', f.vcd_lat_fricative + [f.uvular], ' üÃ†Ãù', tr.W],
])

EJECTIVE_FRICATIVE = [mod.nonpulmonic(phon) for phon in VOICELESS_FRICATIVE]
FRICATIVE = VOICELESS_FRICATIVE + VOICED_FRICATIVE + EJECTIVE_FRICATIVE

CENTRAL_APPROXIMANT = ls.apply_foreach(p.base_phon, [
    ['bu', f.central_approximant + [f.bilabial], 'Œ≤Ãû', tr.W],
    ['vu', f.central_approximant + [f.labiodental], ' ã', tr.V],
    ['du', f.central_approximant + [f.dental], '…πÃ™', tr.R],
    ['ru', f.central_approximant + [f.alveolar], '…π', tr.R],
    ['rxu', f.central_approximant + [f.postalveolar], '…πÃ†', tr.R],
    ['rru', f.central_approximant + [f.retroflex], '…ª', tr.R],
    ['y', f.central_approximant + [f.palatal], 'j', tr.Y],
    ['gu', f.central_approximant + [f.palatal], '…∞', tr.W],
    ['ju', f.central_approximant + [f.uvular], ' ÅÃû', tr.W],
    ['hhu', f.central_approximant + [f.pharyngeal], ' °Ãû', tr.H],
    ['hu', f.central_approximant + [f.glottal], ' îÃû', tr.H],
    ['yw', f.central_approximant + [f.palatal, f.labial], '…•', tr.W + tr.Y],
    ['wy', f.central_approximant + f.vlr_lbl + [f.palatal], '…•ÃÑ', tr.W + tr.Y],
    ['w', f.central_approximant + f.vlr_lbl, 'w', tr.W],
])

LATERAL_APPROXIMANT = ls.apply_foreach(p.base_phon, [
    ['lv', f.lateral_approximant + [f.dental], 'lÃ™', tr.L],
    ['l', f.lateral_approximant + [f.alveolar], 'l', tr.L],
    ['lx', f.lateral_approximant + [f.postalveolar], 'lÃ†', tr.L],
    ['ll', f.lateral_approximant + [f.retroflex], '…≠', tr.L],
    ['ly', f.lateral_approximant + [f.palatal], ' é', tr.L + tr.Y],
    ['lg', f.lateral_approximant + [f.velar], ' ü', tr.W],
    ['lj', f.lateral_approximant + [f.uvular], ' üÃ†', tr.W],
    ['lw', f.lateral_approximant + f.vlr_lbl, '…´', tr.W],
])

APPROXIMANT = CENTRAL_APPROXIMANT + LATERAL_APPROXIMANT

VOICED_FLAP = ls.apply_foreach(p.base_phon, [
    ['bt', f.vcd_flap + [f.bilabial], '‚±±Ãü', tr.B],
    ['vt', f.vcd_flap + [f.labiodental], '‚±±', tr.V],
    ['vr', f.vcd_flap + [f.dental], '…æÃ™', tr.R],
    ['rt', f.vcd_flap + [f.alveolar], '…æ', tr.R],
    ['xr', f.vcd_flap + [f.postalveolar], '…æÃ†', tr.R],
    ['rd', f.vcd_flap + [f.retroflex], '…Ω', tr.S_RD],
    ['ht', f.vcd_flap + [f.pharyngeal], ' °ÃÜ', tr.H],
    ['vl', f.vcd_flap + [f.dental, f.lateral], '…∫Ã™', tr.R],
    ['rl', f.vcd_flap + [f.alveolar, f.lateral], '…∫', tr.R],
    ['xl', f.vcd_flap + [f.postalveolar, f.lateral], '…∫Ã†', tr.R],
    ['lr', f.vcd_flap + [f.retroflex, f.lateral], 'ùºà', tr.R],
])

DEVOICED_FLAP = [mod.devoiced(phon) for phon in VOICED_FLAP]
FLAP = VOICED_FLAP + DEVOICED_FLAP

VOICED_TRILL = ls.apply_foreach(p.base_phon, [
    ['bb', f.vcd_trill + [f.bilabial], ' ô', tr.B],
    ['vv', f.vcd_trill + [f.labiodental], '‚±±Ãû', tr.V],
    ['rv', f.vcd_trill + [f.dental], 'rÃ™', tr.R],
    ['r', f.vcd_trill + [f.alveolar], 'r', tr.R],
    ['rx', f.vcd_trill + [f.postalveolar], 'rÃ†', tr.R],
    ['rr', f.vcd_trill + [f.retroflex], '…Ωr', tr.R],
    ['rj', f.vcd_trill + [f.uvular], ' Ä', tr.R],
    ['hh', f.vcd_trill + [f.epiglottal], ' ¢', tr.H],
])

DEVOICED_TRILL = [mod.devoiced(phon) for phon in VOICED_TRILL]
TRILL = VOICED_TRILL + DEVOICED_TRILL

CLICK_RELEASE = ls.apply_foreach(p.base_phon, [
    ['pk', f.click_release + [f.bilabial], ' ò', tr.P],
    ['ck', f.click_release + [f.dental], '«Ä', tr.C],
    ['lk', f.click_release + [f.alveolar, f.lateral], '«Å', tr.X],
    ['tk', f.click_release + [f.alveolar], '«É', tr.Q],
    ['yk', f.click_release + [f.palatal], '«Ç', tr.T],
    ['rk', f.click_release + [f.retroflex], 'ùºä', tr.Q],
])

SIMPLE_CONS = (
    NASAL + STOP + CLICK_RELEASE + FRICATIVE + APPROXIMANT + FLAP + TRILL
)

SIMPLE_PHON = SIMPLE_VOWEL + SIMPLE_CONS
_S = p.phon_inventory(SIMPLE_PHON)

DIPHTHONG = ls.apply_foreach(mod.diphthong, [
    [[_S.A, _S.I], tr.S_AI],
    [[_S.A, _S.U], tr.S_AU],
])

# Only the affricates whose default romanizations are different to the
# concatenation of its componenets are listed.
# For simplicity, stop parts of affricates are conflated.
# The T in T_SS is implicitly retroflex (TT).
VOICELESS_AFFRICATE = mod.ls_affricate(_S.T, [_S.SH, _S.SS, _S.SY], tr.S_CH)
VOICED_AFFRICATE = mod.ls_affricate(_S.D, [_S.ZH, _S.ZZ, _S.ZY], tr.J)
AFFRICATE = VOICELESS_AFFRICATE + VOICED_AFFRICATE

CLICK = mod.ls_click(
    [_S.K, _S.G, _S.NG, _S.Q, _S.J, _S.NJ],
    CLICK_RELEASE
)

STRESS = ls.apply_foreach(mod.stress, [
    [mod.MOD.HGH, 'Àà'],  # primary
    [mod.MOD.MDL, 'Àå']  # secondary
])

PITCH = ls.apply_foreach(mod.pitch, [
    [mod.MOD.TOP, 'Ãã'],  # top, extra high
    [mod.MOD.HGH, 'ÃÅ'],  # high
    [mod.MOD.MDL, 'ÃÑ'],  # mid
    [mod.MOD.LOW, 'ÃÄ'],  # low
    [mod.MOD.BTM, 'Ãè'],  # bottom, extra low
])

CONTOUR = ls.apply_foreach(mod.contour, [
    [mod.MOD.RSN, 'Ãå'],  # rising
    [mod.MOD.FLN, 'ÃÇ'],  # falling
])

INTONATION = ls.apply_foreach(mod.intonation, [
    [mod.MOD.RSN, '‚ÜóÔ∏é'],  # global rise
    [mod.MOD.FLN, '‚ÜòÔ∏é'],  # globall fall
    [mod.MOD.TRP, '|'],  # foot break, conflated with intonation break
])

VOWEL = SIMPLE_VOWEL + DIPHTHONG
CONSONANT = SIMPLE_CONS + CLICK + AFFRICATE
FEATURE = SILENCE + STANDALONE_FEATURE
SUPRASEGMENTAL = STRESS + PITCH + CONTOUR + INTONATION
PHONEMES = FEATURE + VOWEL + CONSONANT + SUPRASEGMENTAL
COMBINING_MODIFIERS = mod.COMBINER + [mod.MOD.DURH]
MOD_INVENTORY = p.phon_inventory(COMBINING_MODIFIERS)
PHON_INVENTORY = p.phon_inventory(PHONEMES)
PHONEME_INVENTORY = p.ph_inventory(PHONEMES + COMBINING_MODIFIERS)
