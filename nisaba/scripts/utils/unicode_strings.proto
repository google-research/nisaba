// Copyright 2021 Nisaba Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package nisaba;

// Protocol buffer message representing character sequences for a particular
// component of a given script, like characters comprising a class of dependent
// vowel signs in Telugu, or mappings between characters, e.g. a mapping from
// Bengali consonant letters to their respective romanization in Latin script.
//
// Next available ID: 4
message UnicodeStrings {
  // A data item can represent a single item in a list of Unicode strings or an
  // item in a mapping.
  //
  // Next available ID: 5
  message Item {
    // Fields `uname` and `raw` are required for defining Unicode string lists
    // (languages) or the source item in a mapping (relation). At least one of
    // the two fields has to be set. If both fields are set, codepoint
    // representation in `uname` must match the contents of `raw`, otherwise an
    // error is raised.

    // Sequence of Unicode characters specified by their character names (e.g.,
    // `BENGALI VOWEL SIGN UU`) or name aliases (e.g., `KANNADA LETTER LLLA`),
    // or sequence names (e.g., `TAMIL SYLLABLE NNNAI`).  Example:
    // [`BRAHMI LETTER AI`, `BRAHMI LETTER JA`].
    repeated string uname = 1;

    // Raw Unicode string. Example: `ëÄêëÄö`.
    string raw = 2;

    // The following fields `to_uname` and `to_raw` are optional. If either
    // (or both) `to_uname` and `to_raw` are set, this item defines a mapping
    // from `uname`/`raw` to `to_uname`/`to_raw`. If both fields are set, the
    // codepoint representation in `to_uname` must match the contents of
    // `to_raw`, otherwise an error is raised.

    // Destination sequence of Unicode characters or sequences specified by
    // their character names (e.g., `BENGALI VOWEL SIGN UU`) or name aliases
    // (e.g., `KANNADA LETTER LLLA`), or sequence names (e.g., `TAMIL SYLLABLE
    // NNNAI`).
    repeated string to_uname = 3;

    // Destination represented as verbatim string in UTF-8 format.
    // Example: `ÍØèÍØëÍØé`.
    string to_raw = 4;
  }

  // Default name prefix of the Unicode characters in this file. This usually
  // corresponds, but is not restricted, to the name of the script we're
  // manipulating upon, e.g. "BENGALI", "GUJARATI". If this field is set,
  // this prefix can be omitted from the names of the characters.
  string uname_prefix = 1;

  // Default name prefix of the Unicode characters listed in the `to_uname`
  // field in `Item` messages in this file. This usually corresponds, but is not
  // restricted, to the name of the script for the text in `to_raw`,
  // e.g. "BENGALI", "GUJARATI". If this field is set, this prefix can be
  // omitted from the names of the characters. If it is not set, it defaults to
  // `uname_prefix` field.
  string to_uname_prefix = 3;

  // A sequence of data items.
  repeated Item item = 2;
}
