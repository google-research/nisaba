// Copyright 2023 Nisaba Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package nisaba;

import "nisaba/scripts/utils/unicode_strings.proto";

// An index containing, for each letter of a particular script, a list of
// languages using it.
//
// Next available ID: 3
message LetterLanguages {
  // A mapping between single letter and the corresponding list of languages.
  //
  // Next available ID: 4
  message Item {
    // Letter definition.
    UnicodeStrings.Item letter = 1;

    // A list of three-letter (`alpha-3`) language codes in ISO 639-2/3 format.
    // See: https://iso639-3.sil.org/code_tables/639/data.
    repeated string language = 2;

    // A letter may or may not be specific to a particular region as well. This
    // list specifies three-letter (`alpha-3`) country codes where this letter
    // is used in ISO 3166-1/2/3 format. For example, according to Wikipedia,
    // Chad has over 120 indigenous languages, a considerable number of which
    // are written using either Latin or Arabic orthography (`Lâ€™Alphabet
    // national tchadien`) developed by the ministry of education (see, e.g.,
    // https://unicode.org/L2/L2010/10288-arabic-proposal.pdf).
    repeated string region = 3;
  }

  // Default prefixes for the Unicode character names listed in the
  // `letter.uname` field in `Item` messages in this file. This usually
  // corresponds, but is not restricted, to the script name of these
  // characters, e.g. "BENGALI", "GUJARATI". It could have multiple values like
  // `["ARABIC", "ARABIC LETTER"]`. An empty prefix is assumed to be
  // implicitly present. When joined with these prefixes, `letter.uname` in
  // an `Item` should be equal to exactly one character name. If this field
  // is set, these prefixes can be omitted from the names of the characters.

  repeated string uname_prefix = 1;

  // List of all the letters.
  repeated Item item = 2;
}
