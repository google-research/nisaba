# Copyright 2022 Nisaba Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Build packages for the Brahmic script APIs.

load("@com_google_protobuf//:protobuf.bzl", "py_proto_library")
load("@nisaba_deps//:requirements.bzl", "requirement")

load(
    "//nisaba/scripts/utils:grammars.bzl",
    "nisaba_compile_grm_py",
    "nisaba_compile_multi_grm_py",
    "nisaba_compile_script_lang_multi_grm_py",
    "nisaba_grm_textproto_test",
)
load(
    "//nisaba/scripts/brahmic:constant.bzl",
    "FIXED_RULE_SCRIPTS",
    "READING_NORM_LANGS",
    "SCRIPTS",
    "VISUAL_NORM_LANGS",
)

package(default_visibility = ["//nisaba/scripts/brahmic:__subpackages__"])

licenses(["notice"])

proto_library(
    name = "script_config_proto",
    srcs = ["script_config.proto"],
)

py_proto_library(
    name = "script_config_py_pb2",
    # Bazel: This rule is not supported natively (yet). There is a custom
    # Starlark macro supplied by the Bazel team (loaded from `protobuf.bzl` file
    # above). See
    #   https://thethoughtfulkoala.com/posts/2020/05/08/py-protobuf-bazel.html
    srcs = ["script_config.proto"],
)

nisaba_compile_multi_grm_py(
    name = "iso",
    outs = {
        "byte": "iso.far",
        "utf8": "iso_utf8.far",
    },
    data = [
        ":nfc.far",
        ":nfc_utf8.far",
    ] + [
        "//nisaba/scripts/brahmic/data/{}:{}.tsv".format(script, file_name)
        for script in SCRIPTS
        for file_name in [
            "coda",
            "consonant",
            "dead_consonant",
            "inherent_vowel",
            "standalone",
            "subjoined_consonant",
            "virama",
            "vowel",
            "vowel_length_sign",
            "vowel_sign",
        ]
    ] + ["//nisaba/scripts/brahmic/data:symbol.tsv"],
    visibility = ["//visibility:public"],
    deps = [
        ":util",
        "//nisaba/scripts/utils:file",
        "//nisaba/scripts/utils:rewrite",
        "@org_opengrm_pynini//pynini",
        "@org_opengrm_pynini//pynini/lib:pynutil",
    ],
)

nisaba_grm_textproto_test(
    name = "iso_test",
    grammar = ":iso",
)

nisaba_compile_multi_grm_py(
    name = "fixed",
    outs = {
        "byte": "fixed.far",
        "utf8": "fixed_utf8.far",
    },
    data = [
        ":iso.far",
        ":iso_utf8.far",
        ":sigma_utf8.far",
    ] + [
        "//nisaba/scripts/brahmic/data/{}:fixed.tsv".format(script)
        for script in FIXED_RULE_SCRIPTS
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":util",
        "//nisaba/scripts/utils:char",
        "//nisaba/scripts/utils:file",
        "//nisaba/scripts/utils:rule",
        "@org_opengrm_pynini//pynini",
    ],
)

nisaba_grm_textproto_test(
    name = "fixed_test",
    grammar = ":fixed",
    token_type = "byte",
)

nisaba_compile_multi_grm_py(
    name = "nfc",
    outs = {
        "byte": "nfc.far",
        "utf8": "nfc_utf8.far",
    },
    data = [
        ":sigma_utf8.far",
    ] + [
        "//nisaba/scripts/brahmic/data/{}:nfc.tsv".format(script)
        for script in SCRIPTS
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":util",
        "//nisaba/scripts/utils:rule",
        "@org_opengrm_pynini//pynini",
    ],
)

nisaba_grm_textproto_test(
    name = "nfc_test",
    grammar = ":nfc",
    textproto = "testdata/nfc.textproto",
    token_type = "byte",
)

nisaba_grm_textproto_test(
    name = "nfc_utf8_test",
    grammar = ":nfc_utf8",
    textproto = "testdata/nfc.textproto",
    token_type = "utf8",
)

py_library(
    name = "util",
    srcs = ["util.py"],
    srcs_version = "PY3",
    deps = [
        ":script_config_py_pb2",
        "//nisaba/scripts/utils:file",
        "@com_google_protobuf//:protobuf_python",
        "@org_opengrm_pynini//pynini",
        "@org_opengrm_pynini//pynini/lib:byte",
        "@rules_python//python/runfiles",
        requirement("pandas"),
    ],
)

py_test(
    name = "util_test",
    size = "small",
    srcs = ["util_test.py"],
    data = ["//nisaba/scripts/brahmic/data/Beng:dead_consonant.tsv"],
    python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        ":util",
        "//nisaba/scripts/utils:file",
        "@io_abseil_py//absl/testing:absltest",
    ],
)

py_library(
    name = "char_util",
    srcs = ["char_util.py"],
    data = [
        "//nisaba/scripts/brahmic/data/{}:{}.tsv".format(script, file_name)
        for script in SCRIPTS
        for file_name in [
            "accept",
            "coda",
            "consonant",
            "dead_consonant",
            "nfc",
            "standalone",
            "subjoined_consonant",
            "virama",
            "visual_rewrite",
            "vowel",
            "vowel_length_sign",
            "vowel_sign",
        ]
    ],
    srcs_version = "PY3",
    deps = [
        ":util",
        "//nisaba/scripts/utils:char",
        "//nisaba/scripts/utils:rewrite",
        "@org_opengrm_pynini//pynini",
        "@org_opengrm_pynini//pynini/lib:pynutil",
    ],
)

nisaba_compile_grm_py(
    name = "sigma",
    out = "sigma_utf8.far",
    deps = [
        ":char_util",
        ":util",
        "//nisaba/scripts/utils:char",
        "@org_opengrm_pynini//pynini",
    ],
)

py_test(
    name = "fst_properties_test",
    srcs = ["fst_properties_test.py"],
    data = [
        ":fixed.far",
        ":fixed_utf8.far",
        ":iso.far",
        ":iso_utf8.far",
        ":nfc.far",
        ":nfc_utf8.far",
        ":reading_norm.far",
        ":reading_norm_utf8.far",
        ":sigma_utf8.far",
        ":visual_norm.far",
        ":visual_norm_utf8.far",
        ":wellformed.far",
        ":wellformed_utf8.far",
    ],
    python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        ":util",
        "//nisaba/scripts/utils:test_util",
        "@io_abseil_py//absl/testing:absltest",
        "@io_abseil_py//absl/testing:parameterized",
        "@org_opengrm_pynini//pynini",
    ],
)

py_test(
    name = "randgen_test",
    size = "enormous",
    srcs = ["randgen_test.py"],
    data = [
        ":fixed.far",
        ":fixed_utf8.far",
        ":iso.far",
        ":nfc.far",
        ":nfc_utf8.far",
        ":reading_norm.far",
        ":reading_norm_utf8.far",
        ":visual_norm.far",
        ":visual_norm_utf8.far",
    ],
    python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        ":util",
        "//nisaba/scripts/utils:file",
        "//nisaba/scripts/utils:test_util",
        "@io_abseil_py//absl/testing:absltest",
        "@io_abseil_py//absl/testing:parameterized",
        "@org_opengrm_pynini//pynini",
    ],
)

nisaba_compile_script_lang_multi_grm_py(
    name = "visual_norm",
    data = [
        ":nfc.far",
        ":nfc_utf8.far",
        ":sigma_utf8.far",
    ],
    data_per_lang = [
        "after_consonant",
        "before_consonant",
    ],
    data_per_script = [
        "consonant",
        "preserve",
        "visual_rewrite",
    ],
    family = "brahmic",
    script_langs = [
        (script, "")
        for script in SCRIPTS
    ] + VISUAL_NORM_LANGS,
    visibility = ["//visibility:public"],
    deps = [
        ":char_util",
        ":util",
        "//nisaba/scripts/utils:char",
        "//nisaba/scripts/utils:file",
        "//nisaba/scripts/utils:rewrite",
        "//nisaba/scripts/utils:rule",
        "@io_abseil_py//absl/flags",
        "@org_opengrm_pynini//pynini",
        "@org_opengrm_pynini//pynini/lib:pynutil",
    ],
)

nisaba_compile_script_lang_multi_grm_py(
    name = "reading_norm",
    data = ["sigma_utf8.far"],
    data_per_lang = ["reading_norm"],
    data_per_script = ["reading_norm"],
    family = "brahmic",
    script_langs = READING_NORM_LANGS,
    deps = [
        ":util",
        "//nisaba/scripts/utils:file",
        "//nisaba/scripts/utils:rewrite",
        "//nisaba/scripts/utils:rule",
        "@io_abseil_py//absl/flags",
        "@org_opengrm_pynini//pynini",
    ],
)

nisaba_compile_multi_grm_py(
    name = "wellformed",
    outs = {
        "byte": "wellformed.far",
        "utf8": "wellformed_utf8.far",
    },
    data = [
        "//nisaba/scripts/brahmic/data/{}:{}.tsv".format(script, file_name)
        for script in SCRIPTS
        for file_name in [
            "accept",
            "coda",
            "consonant",
            "dead_consonant",
            "preserve",
            "standalone",
            "subjoined_consonant",
            "virama",
            "vowel",
            "vowel_length_sign",
            "vowel_sign",
        ]
    ] + ["//nisaba/scripts/brahmic/data/Thaa:script_config.textproto"],
    visibility = ["//visibility:public"],
    deps = [
        ":util",
        "//nisaba/scripts/utils:file",
        "@org_opengrm_pynini//pynini",
    ],
)

nisaba_grm_textproto_test(
    name = "wellformed_test",
    grammar = ":wellformed",
    textproto = "testdata/wellformed.textproto",
    token_type = "byte",
)

nisaba_grm_textproto_test(
    name = "wellformed_utf8_test",
    grammar = ":wellformed_utf8",
    textproto = "testdata/wellformed.textproto",
    token_type = "utf8",
)

py_library(
    name = "py",
    srcs = ["__init__.py"],
    data = [
        ":iso.far",
        ":nfc.far",
        ":reading_norm.far",
        ":visual_norm.far",
        ":wellformed.far",
    ],
    srcs_version = "PY3",
    visibility = ["//visibility:public"],
    deps = [
        ":util",
        "//nisaba/scripts/utils:far",
        "@org_opengrm_pynini//pynini",
    ],
)

py_test(
    name = "py_test",
    size = "small",
    srcs = ["brahmic_test.py"],
    main = "brahmic_test.py",
    python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        ":py",
        "@io_abseil_py//absl/testing:absltest",
    ],
)

cc_library(
    name = "far_cc",
    srcs = ["far.cc"],
    hdrs = ["far.h"],
    data = [
        ":iso.far",
        ":nfc.far",
        ":nfc_utf8.far",
        ":reading_norm.far",
        ":reading_norm_utf8.far",
        ":visual_norm.far",
        ":visual_norm_utf8.far",
        ":wellformed.far",
        ":wellformed_utf8.far",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//nisaba/scripts/utils:far_base",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "far_cc_test",
    size = "small",
    srcs = ["far_test.cc"],
    deps = [
        ":far_cc",
        "//nisaba/port:status-matchers",
        "@com_google_googletest//:gtest_main",
        "@org_openfst//:fst",
    ],
)

cc_library(
    name = "cc",
    srcs = ["grammar.cc"],
    hdrs = ["grammar.h"],
    data = [":far_files"],
    visibility = ["//visibility:public"],
    deps = [
        "//nisaba/port:file_util",
        "//nisaba/port:status_macros",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@org_opengrm_thrax//:thrax",
    ],
)

cc_test(
    name = "cc_test",
    size = "medium",
    srcs = ["grammar_test.cc"],
    deps = [
        ":cc",
        "//nisaba/port:status-matchers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

exports_files([
    "testdata/reading_norm.tsv",
    "testdata/visual_norm.tsv",
])

filegroup(
   name = "far_files",
   srcs = [
       ":iso.far",
       ":nfc.far",
       ":reading_norm.far",
       ":visual_norm.far",
       ":wellformed.far",
   ],
)
